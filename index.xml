<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learn Everything</title>
    <link>https://shiver.github.io/</link>
    <description>Recent content on Learn Everything</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2023 | Follow on &lt;a class=&#34;follow-item&#34; href=&#34;https://twitter.com/shivernz&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt; | &lt;a class=&#34;follow-item&#34; href=&#34;https://github.com/shiver&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 24 Mar 2023 08:00:00 +0800</lastBuildDate><atom:link href="https://shiver.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why I find Rust interesting</title>
      <link>https://shiver.github.io/post/why_i_find_rust_interesting/</link>
      <pubDate>Fri, 24 Mar 2023 08:00:00 +0800</pubDate>
      
      <guid>https://shiver.github.io/post/why_i_find_rust_interesting/</guid>
      <description>Initially, I planned for this to be an introduction to the Rust programming language for colleagues at work. However, when looking around online for inspiration, I noticed that one thing there was no shortage of, were Rust introductions. So with that in mind, I thought I would instead focus why I personally find the language interesting.
So I won&amp;rsquo;t be teaching you how to write Rust. I won&amp;rsquo;t be giving an overview of the language syntax, or its type system.</description>
    </item>
    
    <item>
      <title>Make your own quick, &#34;simple&#34; and portable heap allocation tracker in Rust</title>
      <link>https://shiver.github.io/post/tracking-heap-allocations-in-rust/</link>
      <pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://shiver.github.io/post/tracking-heap-allocations-in-rust/</guid>
      <description>Introduction Besides altering your algorithms, another easy way to improve the performance of your code is by reducing heap allocations. Compared to the heap, stack allocations are significantly faster to both allocate and free, as they are usually done by simply updating a pointer, potentially in a single operation, and often by a dedicated CPU register.
The heap on the other hand is a complicated beast. There is a fair amount of bookkeeping involved when acquiring and potentially releasing memory for your application, and avoiding this overhead will usually net you some decent performance gains, especially if these are happening frequently in your code.</description>
    </item>
    
    <item>
      <title>Lowering in C#</title>
      <link>https://shiver.github.io/post/csharp-lowering/</link>
      <pubDate>Mon, 22 Aug 2022 07:41:39 +0800</pubDate>
      
      <guid>https://shiver.github.io/post/csharp-lowering/</guid>
      <description>Understanding the performance characteristics of a C# program isn&amp;rsquo;t always as straightforward as you might think. In much the same way as the JIT can take IL code, transform and then optimise it. Your C# code will first go through a phase where it is lowered before being transformed into IL.
Shortcuts Rather than providing custom implementations for each syntax feature at the IL level, lowering allows the compiler authors to save a bit of time and convert that syntax into simpler constructs, which can then be transformed into IL.</description>
    </item>
    
    <item>
      <title>Area 5150 &amp; The Demoscene</title>
      <link>https://shiver.github.io/post/area_5150_and_the_demoscene/</link>
      <pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://shiver.github.io/post/area_5150_and_the_demoscene/</guid>
      <description>For those not familiar, the demoscene is a computer art subculture whose main focus is on producing self-contained audiovisual presentations for people to flex their programming, graphical or musical ability.
It started sometime in the early 1980s and remained quite popular up until the early 2000s. Its&amp;rsquo; popularity has fallen off somewhat in recent years, but it still continues today, with demos being released mostly at organised competitive events such as Evoke, a demoparty which is held annually in Cologne.</description>
    </item>
    
    <item>
      <title>Opinion - a view or judgement formed about something, not necessarily based on fact or knowledge</title>
      <link>https://shiver.github.io/post/opinions/</link>
      <pubDate>Sat, 24 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://shiver.github.io/post/opinions/</guid>
      <description>As a software developer who has been in or around the industry in one way or another for over twenty years now, I find the content on the wider internet landscape more and more difficult to digest. This is not a comment on the quality of the writing, the intrusive nature of modern day advertising, or even the click-bait articles that are overt in their inaccuracies and increasingly pervasive. Nor is this about the vitriolic endless back-and-forth between supporters for opposing ideologies, be they political or otherwise.</description>
    </item>
    
  </channel>
</rss>
